#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>
#include <fstream>
#include <vector>

using namespace cv;
using namespace std;

void segmentate(vector<Mat> images, vector<String> fileNames, string setName);
void colourSegHSV(Mat source, Mat& result);


#define SEPH 3
#define SEPV 15
void createWindowPartition(Mat srcI, Mat& largeWin, Mat win[], Mat legends[], int noOfImagePerCol = 1,
int noOfImagePerRow = 1, int sepH = SEPH, int sepV = SEPV);
void displayCaption(Mat win, const char* caption, int y = 20, int x = 6);
Mat convertGrayFloat2GrayImage(Mat grayFloat, Mat* outputImage = NULL);
Mat convertGrayFloat2ColorImage(Mat grayFloat, Mat* outputImage = NULL);
Mat generateGaussian(int rows, int cols, int sigma);

int main()
{
    // set A folder location: Inputs/SetA

    system("dir \"Inputs\\SetB\\*.png\" /b > dirList.txt");
    ifstream setB("dirList.txt");
    vector<Mat> imagesB = {};
	vector<String> fileNamesB = {};

    string fileName;
    while (getline(setB, fileName)) {
        imagesB.push_back(imread("Inputs/SetB/" + fileName));
		fileNamesB.push_back(fileName);
    }

    segmentate(imagesB, fileNamesB, "setB");

    return 0;
}

void segmentate(vector<Mat> images, vector<String> fileNames, string setName) {
	Size outputSize = Size(150, 150);
	Mat results;
	const int noOfImagePerCol = 100, noOfImagePerRow = 5;
	Mat win[noOfImagePerCol * noOfImagePerRow];
	Mat legends[noOfImagePerCol * noOfImagePerRow];
	int totalResultImageCount = 0;
    for(int i = 0; i < images.size(); i++) {
		int currentIndex = i % 100;
		if (currentIndex == 0) {
			createWindowPartition(Mat(outputSize, CV_8UC3), results, win, legends, noOfImagePerCol, noOfImagePerRow);
		}

		// show original image
		resize(images[i], win[currentIndex * noOfImagePerRow], outputSize, INTER_LINEAR);
		putText(legends[currentIndex * noOfImagePerRow], "Original Image", Point(1, 12), 1, .7, Scalar(255, 255, 255), 1);

		// HSV segmentation
		Mat HSVmask;
		colourSegHSV(images[i], HSVmask);
		resize(HSVmask, win[currentIndex * noOfImagePerRow + 1], outputSize, INTER_LINEAR);
		putText(legends[currentIndex * noOfImagePerRow + 1], "HSV segmentation", Point(1, 12), 1, .7, Scalar(255, 255, 255), 1);

		if (currentIndex == 99 || i == images.size() - 1) {
			imwrite(setName + " results " + to_string(totalResultImageCount++) + ".png", results(Range(0, outputSize.height * currentIndex + SEPV * currentIndex), Range::all()));
		}
    }
}

void colourSegHSV(Mat source, Mat &result) {
	// define colour ranges in HSV
	Scalar redStart1 = Scalar(0, 0, 0), redEnd1 = Scalar(0, 0, 0);
	Scalar redStart2 = Scalar(0, 0, 0), redEnd2 = Scalar(0, 0, 0);
	Scalar yellowStart1 = Scalar(0, 0, 0), yellowEnd1 = Scalar(0, 0, 0);
	Scalar greenStart1 = Scalar(0, 0, 0), greenEnd1 = Scalar(0, 0, 0);
	Scalar blueStart1 = Scalar(0, 0, 0), blueEnd1 = Scalar(0, 0, 0);
	Scalar whiteStart1 = Scalar(0, 0, 0), whiteEnd1 = Scalar(0, 0, 0);
	Scalar blackStart1 = Scalar(0, 0, 0), blackEnd1 = Scalar(0, 0, 0);

	// blur source image using gaussian blur

	// convert source image into HSV colour space

	// thresholding using the HSV colour ranges

	// use morphological close operation to fill small gap between segmented regions

	// store result into Mat &result. Result is a white mask representing the segmented region
	result = Mat(source.size(), CV_8UC3, Scalar(255, 255, 255));
}































void createWindowPartition(Mat srcI, Mat& largeWin, Mat win[], Mat legends[], int noOfImagePerCol,
	int noOfImagePerRow, int sepH, int sepV) {
	// 1st input: source input image
	// 2nd: the created larger window
	// 3th: means to access each sub window
	// 4th: means to access each legend window
	// 5rd, 6th: Obvious
	// 7th: separating space between 2 images in horizontal direction
	// 8th: separating space between 2 images in vertial direction

	int		rows = srcI.rows, cols = srcI.cols, winI = 0, winsrcI = 0;
	Size	sRXC((cols + sepH) * noOfImagePerRow - sepH, (rows + sepV) * noOfImagePerCol),
		s(cols, sepV);

	largeWin = Mat::ones(sRXC, srcI.type()) * 64;
	for (int i = 0; i < noOfImagePerCol; i++)
		for (int j = 0; j < noOfImagePerRow; j++)
			win[winI++] = largeWin(Range((rows + sepV) * i, (rows + sepV) * i + rows),
				Range((cols + sepH) * j, (cols + sepH) * j + cols));

	for (int bg = 20, i = 0; i < noOfImagePerCol; i++)
		for (int j = 0; j < noOfImagePerRow; j++) {
			legends[winsrcI] = largeWin(Range((rows + sepV) * i + rows, (rows + sepV) * (i + 1)),
				Range((cols + sepH) * j, (cols + sepH) * j + cols));
			legends[winsrcI] = Scalar(bg, bg, bg);
			bg += 30;
			if (bg > 80) bg = 20;
			winsrcI++;
		}
}

void displayCaption(Mat win, const char* caption, int y, int x) {
	putText(win, caption, Point(x, y), 3, //CV_FONT_HERSHEY_COMPLEX,
		0.6, Scalar(255, 255, 255));
}

Mat convertGrayFloat2GrayImage(Mat grayFloat, Mat* out) {
	Mat		image;
	normalize(grayFloat, image, 0, 255, NORM_MINMAX);
	image.convertTo(image, CV_8U);
	if (out != NULL) {
		image.copyTo(*out);
	}
	return image;
}

Mat convertGrayFloat2ColorImage(Mat grayFloat, Mat* out) {
	Mat		tmp;
	normalize(grayFloat, tmp, 0, 255, NORM_MINMAX);
	tmp.convertTo(tmp, CV_8U);
	cvtColor(tmp, tmp, COLOR_GRAY2BGR);
	if (out != NULL) {
		tmp.copyTo(*out);
	}
	return tmp;
}

Mat generateGaussian(int rows, int cols, int sigma) {
	Mat gx, gy, g;
	gx = getGaussianKernel(cols, sigma, CV_32F);
	gy = getGaussianKernel(rows, sigma, CV_32F);
	transpose(gx, gx);
	g = gy * gx; // Matrix multiplication is used here different from multiply().
	normalize(g, g, 0, 1, NORM_MINMAX);
	return g;
}
